---
import Container from "@components/container.astro";
import Link from "@components/ui/link.astro";
import Dropdown from "./dropdown.astro";
import { Astronav, MenuItems, MenuIcon } from "astro-navbar";

const menuitems = [
  {
    title: "Accueil",
    path: "/",
  },

  {
    title: "Jobs",
    path: "/jobs",
  },
  {
    title: "Contact",
    path: "/contact",
  },
  {
    title: "Admin Panel",
    path: "/admin",
  },
];
---

<Container>
  <header class="flex flex-col lg:flex-row justify-between items-center my-5">
    <Astronav>
      <div class="flex w-full lg:w-auto items-center justify-between">
        <a href="/" class="text-lg"
          ><span class="font-bold text-slate-800">In</span><span
            class="text-slate-500">Dev</span
          >
        </a>
        <div class="block lg:hidden">
          <MenuIcon class="w-4 h-4 text-gray-800" />
        </div>
      </div>
      <MenuItems class="hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0">
        <ul class="flex flex-col lg:flex-row lg:gap-3">
          {
            menuitems.map((item, index) => (
              <>
                {item.children && (
                  <Dropdown
                    title={item.title}
                    children={item.children}
                    lastItem={index === menuitems.length - 1}
                  />
                )}

                {!item.children && (
                  <li>
                    <a
                      href={item.path}
                      class="flex lg:px-3 py-2 items-center text-gray-600 hover:text-gray-900">
                      <span> {item.title}</span>
                      {item.badge && (
                        <span class="ml-1 px-2 py-0.5 text-[10px] animate-pulse font-semibold uppercase text-white bg-indigo-200 rounded-full">
                          New
                        </span>
                      )}
                    </a>
                  </li>
                )}
              </>
            ))
          }
        </ul>
      </MenuItems>
      <div>
        <a style="margin: 10px;" id="loginOrManageLink" href="./manage"
          >Manage</a
        >
        <Link id="logoutOrSignupLink" size="md">Déconnexion</Link>
      </div>
    </Astronav>
  </header>
  <script>
    function init() {
      buttondisplay();
      // Fonction pour gérer la déconnexion
      function logout(event) {
        event.preventDefault(); // Prévenir le comportement par défaut du lien

        // Supprimer le cookie "authKey" s'il existe
        document.cookie =
          "authKey=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        // Supprimer l'access token du localStorage
        localStorage.removeItem("authKey");
        // Recharger la page
        location.reload();
      }

      // Fonction pour gérer l'affichage des boutons
      function buttondisplay() {
        // Vérifier la présence de l'access token dans localStorage
        const accessToken = localStorage.getItem("authKey");

        // Sélectionner les éléments des liens "Manage" et "Déconnexion"
        const loginOrManageLink = document.getElementById("loginOrManageLink");
        const logoutOrSignupLink =
          document.getElementById("logoutOrSignupLink");

        // Vérifier si un cookie "authKey" existe
        const authKeyCookieFound = document.cookie
          .split(";")
          .some((cookie) => cookie.trim().startsWith("authKey="));

        // Gérer le texte et l'action des liens en fonction de la présence du cookie et de l'access token
        if (authKeyCookieFound || accessToken) {
          // Si un cookie "authKey" ou un access token est présent
          loginOrManageLink.href = "./manage"; // URL de gestion
          loginOrManageLink.textContent = "Manage";

          logoutOrSignupLink.textContent = "Déconnexion";
          logoutOrSignupLink.removeEventListener("click", logout); // Enlever l'ancien gestionnaire d'événement
          logoutOrSignupLink.addEventListener("click", logout); // Ajouter la nouvelle fonction de déconnexion
          logoutOrSignupLink.href = "#"; // Ajouter un href pour activer le style de lien
        } else {
          // Si ni le cookie ni l'access token ne sont présents
          loginOrManageLink.href = "./login"; // URL de connexion
          loginOrManageLink.textContent = "Log in";

          logoutOrSignupLink.textContent = "Sign Up";
          logoutOrSignupLink.href = "./signup"; // URL d'inscription
          logoutOrSignupLink.removeEventListener("click", logout); // Enlever le gestionnaire d'événement de déconnexion
        }
      }
    }
    document.addEventListener("astro:page-load", init);
    window.addEventListener("astro:after-swap", init);
  </script>
</Container>
