---
import Layout from "@layouts/Layout.astro";
const googleMapsApiKey = import.meta.env.GOOGLE_MAPS_API_KEY;
---

<Layout title="manage" googleMapsApiKey={googleMapsApiKey}>
  <section class="contener">
    <div class="wrapper">
      <div class="title">Manage your account</div>
      <form id="loginForm">
        <div class="field">
          <input type="email" name="Email" />
          <label>Change your email</label>
        </div>
        <div class="field">
          <input type="text" name="login" />
          <label>Change your login</label>
        </div>
        <div class="field">
          <input type="password" name="password" />
          <label>Change your password</label>
        </div>
        <div class="field">
          <input type="password" name="password_confirmation" />
          <label>comfirm your password</label>
        </div>
        <div class="field">
          <input name="description" />
          <label id="description_label">Add a description of you</label>
          <div class="field">
            <input type="submit" value="Submit" id="Submit" />
          </div>
        </div>
      </form>
    </div>
    <script>
      import anime from "animejs";

      document.addEventListener("astro:page-load", function () {
        const accessToken = localStorage.getItem("authKey");
        let payloadObj = null; // Initialize payloadObj as null
        if (accessToken) {
          const token = accessToken;
          const parts = token.split(".");
          const decodedPayload = atob(parts[1]);
          payloadObj = JSON.parse(decodedPayload);
        } else {
          const cookies = document.cookie.split(";");
          for (const cookie of cookies) {
            const parts = cookie.trim().split("=");
            if (parts[0] === "authKey") {
              const token = parts[1];
              const parts2 = token.split(".");
              const decodedPayload = atob(parts2[1]);
              payloadObj = JSON.parse(decodedPayload);
              break;
            }
          }
        }

        if (payloadObj) {
          const emailInput = document.querySelector(
            "input[name='Email']",
          ) as HTMLInputElement;
          const loginInput = document.querySelector(
            "input[name='login']",
          ) as HTMLInputElement;
          const passwordInput = document.querySelector(
            "input[name='password']",
          ) as HTMLInputElement;
          const passwordConfirmationInput = document.querySelector(
            "input[name='password_confirmation']",
          ) as HTMLInputElement;
          const descriptionInput = document.querySelector(
            "input[name='description']",
          );
          const descriptionLabel = document.getElementById(
            "description_label",
          ) as HTMLLabelElement;
          const submitbutton = document.getElementById(
            "Submit",
          ) as HTMLInputElement;

          if (payloadObj.userType === "company") {
            descriptionLabel.textContent = "Change localisation";
            const autocomplete = new google.maps.places.Autocomplete(
              descriptionInput,
            );
            passwordInput.addEventListener("input", function () {
              if (passwordInput.value.trim() !== "") {
                passwordConfirmationInput.required = true;
              } else {
                passwordConfirmationInput.required = false;
              }
            });
            google.maps.event.addListener(
              autocomplete,
              "place_changed",
              function () {
                const place = autocomplete.getPlace();
              },
            );
          }

          // Écouteur d'événement pour le bouton "Submit"
          document
            .querySelector("form")
            .addEventListener("submit", function (e) {
              e.preventDefault(); // Empêche la soumission du formulaire par défaut

              // Récupérer les valeurs des champs
              const emailValue = emailInput.value;
              const loginValue = loginInput.value;
              const passwordValue = passwordInput.value;
              const passwordConfirmationValue = passwordConfirmationInput.value;

              // Vérifier si les mots de passe correspondent
              if (passwordValue !== passwordConfirmationValue) {
                alert("Les mots de passe ne correspondent pas.");
                return; // Arrêter le traitement du formulaire
              }

              let userData = {};

              if (emailValue) {
                userData.email = emailValue;
              }

              if (loginValue) {
                userData.login = loginValue;
              }

              if (passwordValue) {
                userData.password = passwordValue;
              }

              if (
                payloadObj.userType === "user" &&
                descriptionInput.value.trim() !== ""
              ) {
                const descriptionValue = descriptionInput.value;
                userData.description = descriptionValue;
              } else if (descriptionInput.value.trim() !== "") {
                const descriptionValue = descriptionInput.value;
                userData.company_location = descriptionValue;
              }
              if (Object.keys(userData).length !== 0) {
                fetch(
                  "http://localhost:3000/" +
                    payloadObj.userType +
                    "/" +
                    payloadObj.sub,
                  {
                    method: "PUT",
                    body: JSON.stringify(userData),
                    headers: {
                      "Content-Type": "application/json",
                    },
                  },
                )
                  .then((response) => {
                    if (response.status === 200) {
                      return response.json();
                    } else {
                      anime({
                        targets: "#registerButton",
                        translateX: ["-12rem", "0rem"],
                        duration: 100,
                        loop: 5,
                        easing: "easeOutBack",
                      });
                      throw new Error("Réponse de l'API différente de 200");
                    }
                  })
                  .then((data) => {
                    // Traiter la réponse de l'API ici
                    submitbutton.style.background =
                      "linear-gradient(-135deg, #007a00, #164e1e)";
                    submitbutton.style.transition = "background 0.7s ease";

                    setTimeout(function () {
                      submitbutton.style.background =
                        "linear-gradient(-135deg, #000000, #474747)";
                    }, 1500);
                  })
                  .catch((error) => {
                    console.error("Une erreur s'est produite :", error);
                    anime({
                      targets: "#Submit",
                      translateX: ["-12rem", "0rem"],
                      duration: 100,
                      loop: 5,
                      easing: "easeOutBack",
                    });
                  });
              } else {
                anime({
                  targets: "#Submit",
                  translateX: ["-12rem", "0rem"],
                  duration: 100,
                  loop: 5,
                  easing: "easeOutBack",
                });
              }
            });
        }
      });
    </script>
  </section>

  <style>
    @import url("https://fonts.googleapis.com/css?family=Poppins:400,500,600,700&display=swap");

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: "Poppins", sans-serif;
    }

    .input_description {
      height: 100%;
      width: 100%;
      outline: none;
      font-size: 17px;
      border: 1px solid lightgrey;
      border-radius: 25px;
      transition: all 0.3s ease;
      resize: none;
    }

    .contener {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .button-container {
      display: flex;
    }

    .button {
      background: linear-gradient(-135deg, #000000, #474747);
      color: #fff;
      font-size: 20px;
      font-weight: 500;
      cursor: pointer;
      border: none;
      border-radius: 25px;
      height: 50px;
      flex: 1; /* Utilisez flex pour les boutons */
      margin: 10px;
      transition: all 0.3s ease;
    }

    .button.active {
      transform: scale(0.95);
      background: white;
      border: 2px solid #262626;
      color: #262626;
    }

    ::selection {
      background: #000000;
      color: #fff;
    }
    .wrapper {
      width: 380px;
      background: #fff;
      border-radius: 15px;
      box-shadow: 0px 15px 20px rgba(0, 0, 0, 0.1);
    }
    .wrapper .title {
      font-size: 35px;
      font-weight: 600;
      text-align: center;
      color: #fff;
      user-select: none;
      border-radius: 15px 15px 0 0;
      background: linear-gradient(-135deg, #000000, #474747);
    }
    .wrapper form {
      padding: 10px 30px 50px 30px;
    }
    .wrapper form .field {
      height: 50px;
      width: 100%;
      margin-top: 20px;
      position: relative;
    }

    .wrapper form .field input {
      height: 100%;
      width: 100%;
      outline: none;
      font-size: 17px;
      border: 1px solid lightgrey;
      border-radius: 25px;
      transition: all 0.3s ease;
      text-align: center;
    }
    .wrapper form .field input:focus,
    form .field input:valid {
      border-color: #000000;
    }
    .wrapper form .field label {
      position: absolute;
      top: 50%;
      left: 20px;
      color: #999999;
      font-weight: 400;
      font-size: 17px;
      pointer-events: none;
      transform: translateY(-50%);
      transition: all 0.3s ease;
    }
    form .field input:focus ~ label,
    form .field input:valid ~ label {
      top: 0%;
      font-size: 16px;
      color: #000000;
      background: #fff;
      transform: translateY(-50%);
    }
    form .field textarea:focus ~ label,
    form .field textarea:valid ~ label {
      top: 0%;
      font-size: 16px;
      color: #000000;
      background: #fff;
      transform: translateY(-80%);
    }
    form .content {
      display: flex;
      width: 100%;
      height: 50px;
      font-size: 16px;
      align-items: center;
      justify-content: space-around;
    }
    form .content .checkbox {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    form .content input {
      width: 15px;
      height: 15px;
      background: red;
    }
    form .content label {
      color: #262626;
      user-select: none;
      padding-left: 5px;
    }
    form .content .pass-link {
      color: "";
    }
    form .field input[type="submit"] {
      color: #fff;
      border: none;
      padding-left: 0;
      margin-top: -10px;
      font-size: 20px;
      font-weight: 500;
      cursor: pointer;
      background: linear-gradient(-135deg, #000000, #474747);
      transition: all 0.3s ease;
    }
    form .field input[type="submit"]:active {
      transform: scale(0.95);
    }
    form .signup-link {
      color: #262626;
      margin-top: 20px;
      text-align: center;
    }
    form .pass-link a,
    form .signup-link a {
      color: #4158d0;
      text-decoration: none;
    }
    form .pass-link a:hover,
    form .signup-link a:hover {
      text-decoration: underline;
    }
  </style>
</Layout>
